{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS\\\\Webrtc\\\\frontend\\\\src\\\\components\\\\Video.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\");\nconst peerConnections = {};\nconst config = {\n  iceServers: [{\n    urls: \"stun:stun.l.google.com:19302\"\n  }]\n};\nfunction Video({\n  roomId\n}) {\n  _s();\n  const localVideo = useRef();\n  const [remoteVideos, setRemoteVideos] = useState({});\n  const localStream = useRef();\n  const userId = useRef(socket.id);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      localVideo.current.srcObject = stream;\n      localStream.current = stream;\n      socket.emit(\"join-room\", roomId, socket.id);\n    });\n    socket.on(\"user-joined\", handleUserJoined);\n    socket.on(\"receive-offer\", handleReceiveOffer);\n    socket.on(\"receive-answer\", handleReceiveAnswer);\n    socket.on(\"receive-ice-candidate\", handleNewICECandidateMsg);\n    socket.on(\"user-disconnected\", handleUserDisconnected);\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    // Step 1: Connect local camera\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      localVideo.current.srcObject = stream;\n      localStream.current = stream;\n\n      // Step 2: Join the room\n      socket.emit(\"join-room\", roomId, socket.id);\n    });\n\n    // Step 3: Listen for new users\n    socket.on(\"user-joined\", handleUserJoined); // ðŸ‘ˆ this must be triggered\n  }, []);\n  const handleUserJoined = async userId => {\n    const peerConnection = new RTCPeerConnection(config);\n    peerConnections[userId] = peerConnection;\n    localStream.current.getTracks().forEach(track => {\n      peerConnection.addTrack(track, localStream.current);\n    });\n    peerConnection.ontrack = event => {\n      setRemoteVideos(prev => ({\n        ...prev,\n        [userId]: event.streams[0]\n      }));\n    };\n    peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        socket.emit(\"ice-candidate\", userId, event.candidate);\n      }\n    };\n    const offer = await peerConnection.createOffer();\n    await peerConnection.setLocalDescription(offer);\n    socket.emit(\"offer\", userId, offer);\n  };\n  const handleReceiveOffer = async (userId, offer) => {\n    const peerConnection = new RTCPeerConnection(config);\n    peerConnections[userId] = peerConnection;\n    localStream.current.getTracks().forEach(track => {\n      peerConnection.addTrack(track, localStream.current);\n    });\n    peerConnection.ontrack = event => {\n      setRemoteVideos(prev => ({\n        ...prev,\n        [userId]: event.streams[0]\n      }));\n    };\n    peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        socket.emit(\"ice-candidate\", userId, event.candidate);\n      }\n    };\n    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n    const answer = await peerConnection.createAnswer();\n    await peerConnection.setLocalDescription(answer);\n    socket.emit(\"answer\", userId, answer);\n  };\n  const handleReceiveAnswer = async (userId, answer) => {\n    const peerConnection = peerConnections[userId];\n    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n  };\n  const handleNewICECandidateMsg = (userId, candidate) => {\n    const peerConnection = peerConnections[userId];\n    peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n  };\n  const handleUserDisconnected = userId => {\n    if (peerConnections[userId]) {\n      peerConnections[userId].close();\n      delete peerConnections[userId];\n      setRemoteVideos(prev => {\n        const newVideos = {\n          ...prev\n        };\n        delete newVideos[userId];\n        return newVideos;\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Room: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: localVideo,\n      autoPlay: true,\n      playsInline: true,\n      muted: true,\n      style: {\n        width: 300\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.entries(remoteVideos).map(([id, stream]) => /*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        playsInline: true,\n        ref: video => {\n          if (video) video.srcObject = stream;\n        },\n        style: {\n          width: 300\n        }\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(Video, \"U0U3Pce5pWVcwM3FyHFJzVdH/8M=\");\n_c = Video;\nexport default Video;\nvar _c;\n$RefreshReg$(_c, \"Video\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","jsxDEV","_jsxDEV","socket","peerConnections","config","iceServers","urls","Video","roomId","_s","localVideo","remoteVideos","setRemoteVideos","localStream","userId","id","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","emit","on","handleUserJoined","handleReceiveOffer","handleReceiveAnswer","handleNewICECandidateMsg","handleUserDisconnected","disconnect","peerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","ontrack","event","prev","streams","onicecandidate","candidate","offer","createOffer","setLocalDescription","setRemoteDescription","RTCSessionDescription","answer","createAnswer","addIceCandidate","RTCIceCandidate","close","newVideos","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","muted","style","width","Object","entries","map","_c","$RefreshReg$"],"sources":["D:/ReactJS/Webrtc/frontend/src/components/Video.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst socket = io(\"http://localhost:5000\");\r\nconst peerConnections = {};\r\nconst config = {\r\n  iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }]\r\n};\r\n\r\nfunction Video({ roomId }) {\r\n  const localVideo = useRef();\r\n  const [remoteVideos, setRemoteVideos] = useState({});\r\n  const localStream = useRef();\r\n  const userId = useRef(socket.id);\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\r\n      localVideo.current.srcObject = stream;\r\n      localStream.current = stream;\r\n\r\n      socket.emit(\"join-room\", roomId, socket.id);\r\n    });\r\n\r\n    socket.on(\"user-joined\", handleUserJoined);\r\n    socket.on(\"receive-offer\", handleReceiveOffer);\r\n    socket.on(\"receive-answer\", handleReceiveAnswer);\r\n    socket.on(\"receive-ice-candidate\", handleNewICECandidateMsg);\r\n    socket.on(\"user-disconnected\", handleUserDisconnected);\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n  // Step 1: Connect local camera\r\n  navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\r\n    localVideo.current.srcObject = stream;\r\n    localStream.current = stream;\r\n\r\n    // Step 2: Join the room\r\n    socket.emit(\"join-room\", roomId, socket.id);\r\n  });\r\n\r\n  // Step 3: Listen for new users\r\n  socket.on(\"user-joined\", handleUserJoined);  // ðŸ‘ˆ this must be triggered\r\n}, []);\r\n\r\n\r\n  const handleUserJoined = async (userId) => {\r\n    const peerConnection = new RTCPeerConnection(config);\r\n    peerConnections[userId] = peerConnection;\r\n\r\n    localStream.current.getTracks().forEach(track => {\r\n      peerConnection.addTrack(track, localStream.current);\r\n    });\r\n\r\n    peerConnection.ontrack = (event) => {\r\n  setRemoteVideos(prev => ({\r\n    ...prev,\r\n    [userId]: event.streams[0]\r\n  }));\r\n};\r\n\r\n\r\n    peerConnection.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        socket.emit(\"ice-candidate\", userId, event.candidate);\r\n      }\r\n    };\r\n\r\n    const offer = await peerConnection.createOffer();\r\n    await peerConnection.setLocalDescription(offer);\r\n    socket.emit(\"offer\", userId, offer);\r\n  };\r\n\r\n  const handleReceiveOffer = async (userId, offer) => {\r\n    const peerConnection = new RTCPeerConnection(config);\r\n    peerConnections[userId] = peerConnection;\r\n\r\n    localStream.current.getTracks().forEach(track => {\r\n      peerConnection.addTrack(track, localStream.current);\r\n    });\r\n\r\n    peerConnection.ontrack = (event) => {\r\n      setRemoteVideos(prev => ({\r\n        ...prev,\r\n        [userId]: event.streams[0]\r\n      }));\r\n    };\r\n\r\n    peerConnection.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        socket.emit(\"ice-candidate\", userId, event.candidate);\r\n      }\r\n    };\r\n\r\n    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n    const answer = await peerConnection.createAnswer();\r\n    await peerConnection.setLocalDescription(answer);\r\n    socket.emit(\"answer\", userId, answer);\r\n  };\r\n\r\n  const handleReceiveAnswer = async (userId, answer) => {\r\n    const peerConnection = peerConnections[userId];\r\n    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n  };\r\n\r\n  const handleNewICECandidateMsg = (userId, candidate) => {\r\n    const peerConnection = peerConnections[userId];\r\n    peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n  };\r\n\r\n  const handleUserDisconnected = (userId) => {\r\n    if (peerConnections[userId]) {\r\n      peerConnections[userId].close();\r\n      delete peerConnections[userId];\r\n      setRemoteVideos(prev => {\r\n        const newVideos = { ...prev };\r\n        delete newVideos[userId];\r\n        return newVideos;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Room: {roomId}</h2>\r\n      <video ref={localVideo} autoPlay playsInline muted style={{ width: 300 }} />\r\n      <div>\r\n        {Object.entries(remoteVideos).map(([id, stream]) => (\r\n          <video\r\n            key={id}\r\n            autoPlay\r\n            playsInline\r\n            ref={(video) => {\r\n              if (video) video.srcObject = stream;\r\n            }}\r\n            style={{ width: 300 }}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Video;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}